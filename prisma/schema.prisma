// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  birthDate     DateTime?
  birthTime     String?
  birthPlace    String?
  zodiacSign    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  readings      Reading[]
  subscriptions Subscription[]
  payments      Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reading {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'tarot', 'zodiac', 'numerology', 'crystal'
  title       String
  description String?
  result      Json     // Store the reading result as JSON
  isPaid      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  plan          String   // 'basic', 'premium', 'unlimited'
  status        String   // 'active', 'cancelled', 'expired'
  stripeId      String?  @unique
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  amount        Int      // Amount in cents
  currency      String   @default("jpy")
  status        String   // 'pending', 'completed', 'failed', 'refunded'
  stripeId      String?  @unique
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TarotCard {
  id          String @id @default(cuid())
  name        String
  number      Int
  suit        String // 'major', 'cups', 'wands', 'swords', 'pentacles'
  meaning     String
  reversed    String
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ZodiacSign {
  id          String @id @default(cuid())
  name        String
  symbol      String
  element     String // 'fire', 'earth', 'air', 'water'
  planet      String
  dates       String // "March 21 - April 19"
  description String
  traits      Json   // Array of personality traits
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
